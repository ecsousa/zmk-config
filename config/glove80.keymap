
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_QWERTY 0
#define LAYER_Acute 1
#define LAYER_Tilde 2
#define LAYER_Circumflex 3
#define LAYER_Grave 4
#define LAYER_Cursor 5
#define LAYER_Number 6
#define LAYER_Symbol 7
#define LAYER_System 8
#define LAYER_Factory 9
#define LAYER_Lower 10
#define LAYER_Magic 11

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
#define OPERATING_SYSTEM 'W' // Windows

behaviors {
    ht: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        require-prior-idle-ms = <125>;
        bindings = <&kp>, <&kp>;
    };

};


macros {

/**
 * Temporarily switches to a layer (`&mo`) while a modifier is held.
 * Analogous to QMK's `LM()`, using a parameterized macro.
 *
 * Params:
 *  1. Layer to switch to
 *  2. Modifier to press while layer is active
 *
 * Example:
 *  `&lm NUM_LAYER LSHIFT`
 */
lm: lm {
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <0>;
    tap-ms = <0>;
    #binding-cells = <2>;
    bindings
        = <&macro_param_2to1>
        , <&macro_press &kp MACRO_PLACEHOLDER>
        , <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_2to1>
        , <&macro_release &kp MACRO_PLACEHOLDER>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
};



    //
    // Linux Magic System Request Key - hold this down and type REISUB
    // - https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
    // - https://github.com/manna-harbour/miryoku/discussions/259
    //
    ZMK_MACRO(linux_magic_sysrq,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press &mo 0 &kp RALT>
            , <&macro_tap &kp PRINTSCREEN>
            , <&macro_pause_for_release>
            , <&macro_release &mo 0 &kp RALT>
            ;
    )

    //////////////////////////////////////////////////////////////////////////
    //
    // World layer - international characters
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // WORLD_USE_COMPOSE uses OS-native Compose keycodes instead of Unicode
    // for characters in the "localizing" section of the `world.yaml` file.
    //
    //#define WORLD_USE_COMPOSE

    //
    // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
    // between keystrokes while inputting the Unicode codepoint shortcut.
    //
    #ifndef UNICODE_TAP_DELAY
    #define UNICODE_TAP_DELAY 1
    #endif

    //
    // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
    // between emitting Unicode codepoints in multi-codepoint characters.
    //
    #ifndef UNICODE_SEQ_DELAY
    #define UNICODE_SEQ_DELAY 10
    #endif

    #define UNICODE(name, ...) \
        ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
        )

    //
    // UNICODE_SEQ_LINUX() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under Linux.
    //
    #ifndef UNICODE_SEQ_LINUX
    #define UNICODE_SEQ_LINUX(keystrokes) \
        <&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
    #endif

    //
    // UNICODE_SEQ_MACOS() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under macOS.
    //
    #ifndef UNICODE_SEQ_MACOS
    #define UNICODE_SEQ_MACOS(keystrokes) \
        <&macro_press &kp LALT> ,\
        <&macro_tap keystrokes> ,\
        <&macro_release &kp LALT>
    #endif

    //
    // UNICODE_SEQ_WINDOWS() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under Windows.
    //
    // If you've configured WinCompose to use a different trigger hotkey,
    // such as F13 instead of the default RA(U) shortcut, simply override
    // this definition to adapt all UNICODE() function calls accordingly.
    //
    #ifndef UNICODE_SEQ_WINDOWS
    #define UNICODE_SEQ_WINDOWS(keystrokes) \
        <&macro_tap &kp RALT &kp U keystrokes &kp ENTER>
    #endif

    //
    // COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
    // which may be RALT by default but can be reconfigured as follows:
    //
    // $ setxkbmap -option compose:sclk # use ScrollLock as Compose key
    //
    // See xkeyboard-config(7) for possible choices for the Compose key:
    // https://manpages.debian.org/stable/xkb-data/xkeyboard-config.7.en.html#Position_of_Compose_key
    //
    // #define COMPOSE_KEY_LINUX RALT            // compose:ralt
    // #define COMPOSE_KEY_LINUX LGUI            // compose:lwin
    // #define COMPOSE_KEY_LINUX RA(LGUI)        // compose:lwin-altgr
    // #define COMPOSE_KEY_LINUX RGUI            // compose:rwin
    // #define COMPOSE_KEY_LINUX RA(RGUI)        // compose:rwin-altgr
    // #define COMPOSE_KEY_LINUX K_MENU          // compose:menu
    // #define COMPOSE_KEY_LINUX RA(K_MENU)      // compose:menu-altgr
    // #define COMPOSE_KEY_LINUX LCTL            // compose:lctrl
    // #define COMPOSE_KEY_LINUX RA(LCTL)        // compose:lctrl-altgr
    // #define COMPOSE_KEY_LINUX RCTL            // compose:rctrl
    // #define COMPOSE_KEY_LINUX RA(RCTL)        // compose:rctrl-altgr
    // #define COMPOSE_KEY_LINUX CAPS            // compose:caps
    // #define COMPOSE_KEY_LINUX RA(CAPS)        // compose:caps-altgr
    // #define COMPOSE_KEY_LINUX NON_US_BSLH     // compose:102
    // #define COMPOSE_KEY_LINUX RA(NON_US_BSLH) // compose:102-altgr
    // #define COMPOSE_KEY_LINUX PAUSE_BREAK     // compose:paus
    // #define COMPOSE_KEY_LINUX PSCRN           // compose:prsc
    // #define COMPOSE_KEY_LINUX SLCK            // compose:sclk
    //
    #ifndef COMPOSE_KEY_LINUX
    #define COMPOSE_KEY_LINUX RALT
    #endif

    //
    // COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
    //
    #ifndef COMPOSE_SEQ_LINUX
    #define COMPOSE_SEQ_LINUX(keystrokes) \
        <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
    #endif

    //
    // COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
    //
    #ifndef COMPOSE_SEQ_MACOS
    #define COMPOSE_SEQ_MACOS(keystrokes) \
        <&macro_tap keystrokes>
    #endif

    //
    // COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
    //
    #ifndef COMPOSE_SEQ_WINDOWS
    #define COMPOSE_SEQ_WINDOWS(keystrokes) \
        <&macro_press &kp LALT>, \
        <&macro_tap keystrokes>, \
        <&macro_release &kp LALT>
    #endif
    #if OPERATING_SYSTEM == 'L'
        #define UNICODE_MORPH_MODS (MOD_LCTL|MOD_LSFT)
    #elif OPERATING_SYSTEM == 'M'
        #define UNICODE_MORPH_MODS MOD_LALT
    #elif OPERATING_SYSTEM == 'W'
        #define UNICODE_MORPH_MODS MOD_RALT
    #endif
    #if OPERATING_SYSTEM == 'L'
        // $ grep "compose:" /usr/share/X11/xkb/rules/base.lst
        // compose:ralt         Right Alt
        #if COMPOSE_KEY_LINUX == RALT
            #define COMPOSE_MORPH_MODS MOD_RALT
        // compose:lwin         Left Win
        #elif COMPOSE_KEY_LINUX == LGUI
            #define COMPOSE_MORPH_MODS MOD_LGUI
        // compose:lwin-altgr   3rd level of Left Win
        #elif COMPOSE_KEY_LINUX == RA(LGUI)
            #define COMPOSE_MORPH_MODS (MOD_LGUI|MOD_RALT)
        // compose:rwin         Right Win
        #elif COMPOSE_KEY_LINUX == RGUI
            #define COMPOSE_MORPH_MODS MOD_RGUI
        // compose:rwin-altgr   3rd level of Right Win
        #elif COMPOSE_KEY_LINUX == RA(RGUI)
            #define COMPOSE_MORPH_MODS (MOD_RGUI|MOD_RALT)
        // compose:menu         Menu
        // compose:menu-altgr   3rd level of Menu
        #elif COMPOSE_KEY_LINUX == RA(K_MENU)
            #define COMPOSE_MORPH_MODS MOD_RALT
        // compose:lctrl        Left Ctrl
        #elif COMPOSE_KEY_LINUX == LCTL
            #define COMPOSE_MORPH_MODS MOD_LCTL
        // compose:lctrl-altgr  3rd level of Left Ctrl
        #elif COMPOSE_KEY_LINUX == RA(LCTL)
            #define COMPOSE_MORPH_MODS (MOD_LCTL|MOD_RALT)
        // compose:rctrl        Right Ctrl
        #elif COMPOSE_KEY_LINUX == RCTL
            #define COMPOSE_MORPH_MODS MOD_RCTL
        // compose:rctrl-altgr  3rd level of Right Ctrl
        #elif COMPOSE_KEY_LINUX == RA(RCTL)
            #define COMPOSE_MORPH_MODS (MOD_RCTL|MOD_RALT)
        // compose:caps         Caps Lock
        // compose:caps-altgr   3rd level of Caps Lock
        #elif COMPOSE_KEY_LINUX == RA(CAPS)
            #define COMPOSE_MORPH_MODS MOD_RALT
        // compose:102          The "&lt; &gt;" key
        // compose:102-altgr    3rd level of the "&lt; &gt;" key
        #elif COMPOSE_KEY_LINUX == RA(NON_US_BSLH)
            #define COMPOSE_MORPH_MODS MOD_RALT
        // compose:paus         Pause
        // compose:prsc         PrtSc
        // compose:sclk         Scroll Lock
        #else
            #define COMPOSE_MORPH_MODS 0
        #endif
    #elif OPERATING_SYSTEM == 'M'
        #define COMPOSE_MORPH_MODS 0
    #elif OPERATING_SYSTEM == 'W'
        #define COMPOSE_MORPH_MODS MOD_LALT
    #endif

    UNICODE(world_degree_sign_macro, /* ° */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_SEQ_LINUX(&kp O &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp B &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_SEQ_MACOS(&kp LA(LS(N8)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp N0)
        #endif
      #endif
    )
    world_degree_sign: world_degree_sign {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_degree_sign_macro>, <&world_degree_sign_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_degree_sign
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_section_sign_macro, /* § */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_SEQ_LINUX(&kp S &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp A &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_SEQ_MACOS(&kp LA(N6))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N7)
        #endif
      #endif
    )
    world_section_sign: world_section_sign {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_section_sign_macro>, <&world_section_sign_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_section_sign
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_paragraph_sign_macro, /* ¶ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_SEQ_LINUX(&kp P &kp EXCL)
        #else
        UNICODE_SEQ_LINUX(&kp B &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_SEQ_MACOS(&kp LA(N7))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp N6)
        #endif
      #endif
    )
    world_paragraph_sign: world_paragraph_sign {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_paragraph_sign_macro>, <&world_paragraph_sign_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_paragraph_sign
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_ordinal_macro, /* º */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp B &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_SEQ_MACOS(&kp LA(N0))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp A)
        #endif
      #endif
    )
    world_o_ordinal: world_o_ordinal {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_ordinal_macro>, <&world_o_ordinal_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_ordinal
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_ordinal_macro, /* ª */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp A &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_SEQ_MACOS(&kp LA(N9))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp A)
        #endif
      #endif
    )
    world_a_ordinal: world_a_ordinal {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ordinal_macro>, <&world_a_ordinal_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_ordinal
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_exclaim_left_macro, /* ¡ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N1)
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
        COMPOSE_SEQ_MACOS(&kp LA(N1))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N1)
        #endif
      #endif
    )
    world_exclaim_left: world_exclaim_left {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_exclaim_left_macro>, <&world_exclaim_left_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_exclaim_left
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_question_left_macro, /* ¿ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_SEQ_LINUX(&kp EXCL &kp EXCL)
        #else
        UNICODE_SEQ_LINUX(&kp B &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_SEQ_MACOS(&kp LA(LS(FSLH)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp F)
        #endif
      #endif
    )
    world_question_left: world_question_left {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_question_left_macro>, <&world_question_left_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_question_left
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_crypto_macro, /* ₿ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp B &kp F)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp B &kp F)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp B &kp F)
      #endif
    )
    world_currency_crypto: world_currency_crypto {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_crypto_macro>, <&world_currency_crypto_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_crypto
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_cent_macro, /* ¢ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N2)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N2)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N2)
      #endif
    )
    world_currency_cent: world_currency_cent {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_cent_macro>, <&world_currency_cent_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_cent
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_sign_macro, /* ¤ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N4)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N4)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N4)
      #endif
    )
    world_currency_sign: world_currency_sign {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_sign_macro>, <&world_currency_sign_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_sign
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_micro_sign_macro, /* µ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_SEQ_LINUX(&kp M &kp U)
        #else
        UNICODE_SEQ_LINUX(&kp B &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_SEQ_MACOS(&kp LA(M))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp N5)
        #endif
      #endif
    )
    world_micro_sign: world_micro_sign {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_micro_sign_macro>, <&world_micro_sign_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_micro_sign
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };

    //
    // characters
    //
    UNICODE(world_i_acute_lower_macro, /* í */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp I)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp D)
        #endif
      #endif
    )
    world_i_acute_lower: world_i_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute_lower_macro>, <&world_i_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_i_acute_upper_macro, /* Í */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp D)
        #endif
      #endif
    )
    world_i_acute_upper: world_i_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute_upper_macro>, <&world_i_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_i_acute: world_i_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_diaeresis_lower_macro, /* ï */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp I)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp I)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp F)
        #endif
      #endif
    )
    world_i_diaeresis_lower: world_i_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis_lower_macro>, <&world_i_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_i_diaeresis_upper_macro, /* Ï */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(I))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(I))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp F)
        #endif
      #endif
    )
    world_i_diaeresis_upper: world_i_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis_upper_macro>, <&world_i_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_i_diaeresis: world_i_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_circumflex_lower_macro, /* î */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_SEQ_LINUX(&kp CARET &kp I)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp I)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp E)
        #endif
      #endif
    )
    world_i_circumflex_lower: world_i_circumflex_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex_lower_macro>, <&world_i_circumflex_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_i_circumflex_upper_macro, /* Î */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_SEQ_LINUX(&kp CARET &kp LS(I))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(I))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp E)
        #endif
      #endif
    )
    world_i_circumflex_upper: world_i_circumflex_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex_upper_macro>, <&world_i_circumflex_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_i_circumflex: world_i_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_grave_lower_macro, /* ì */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp I)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp I)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp C)
        #endif
      #endif
    )
    world_i_grave_lower: world_i_grave_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_grave_lower_macro>, <&world_i_grave_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_i_grave_upper_macro, /* Ì */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(I))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(I))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp C)
        #endif
      #endif
    )
    world_i_grave_upper: world_i_grave_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_grave_upper_macro>, <&world_i_grave_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_i_grave: world_i_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_acute_lower_macro, /* é */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp E)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp E)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N9)
        #endif
      #endif
    )
    world_e_acute_lower: world_e_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute_lower_macro>, <&world_e_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_e_acute_upper_macro, /* É */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(E))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(E))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N9)
        #endif
      #endif
    )
    world_e_acute_upper: world_e_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute_upper_macro>, <&world_e_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_e_acute: world_e_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_diaeresis_lower_macro, /* ë */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp E)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp E)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp B)
        #endif
      #endif
    )
    world_e_diaeresis_lower: world_e_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis_lower_macro>, <&world_e_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_e_diaeresis_upper_macro, /* Ë */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(E))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(E))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp B)
        #endif
      #endif
    )
    world_e_diaeresis_upper: world_e_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis_upper_macro>, <&world_e_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_e_diaeresis: world_e_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_circumflex_lower_macro, /* ê */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_SEQ_LINUX(&kp CARET &kp E)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp E)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N4)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp A)
        #endif
      #endif
    )
    world_e_circumflex_lower: world_e_circumflex_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex_lower_macro>, <&world_e_circumflex_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_e_circumflex_upper_macro, /* Ê */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_SEQ_LINUX(&kp CARET &kp LS(E))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(E))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp A)
        #endif
      #endif
    )
    world_e_circumflex_upper: world_e_circumflex_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex_upper_macro>, <&world_e_circumflex_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_e_circumflex: world_e_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_grave_lower_macro, /* è */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp E)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp E)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N8)
        #endif
      #endif
    )
    world_e_grave_lower: world_e_grave_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_grave_lower_macro>, <&world_e_grave_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_e_grave_upper_macro, /* È */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(E))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(E))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N8)
        #endif
      #endif
    )
    world_e_grave_upper: world_e_grave_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_grave_upper_macro>, <&world_e_grave_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_e_grave: world_e_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_ae_lower_macro, /* æ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_SEQ_LINUX(&kp A &kp E)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_SEQ_MACOS(&kp LA(SQT))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N6)
        #endif
      #endif
    )
    world_e_ae_lower: world_e_ae_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae_lower_macro>, <&world_e_ae_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_e_ae_upper_macro, /* Æ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_SEQ_LINUX(&kp LS(A) &kp LS(E))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_SEQ_MACOS(&kp LA(LS(SQT)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N6)
        #endif
      #endif
    )
    world_e_ae_upper: world_e_ae_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae_upper_macro>, <&world_e_ae_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_e_ae: world_e_ae {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_acute_lower_macro, /* á */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp A)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N1)
        #endif
      #endif
    )
    world_a_acute_lower: world_a_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute_lower_macro>, <&world_a_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_acute_upper_macro, /* Á */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N1)
        #endif
      #endif
    )
    world_a_acute_upper: world_a_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute_upper_macro>, <&world_a_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_acute: world_a_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_diaeresis_lower_macro, /* ä */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N4)
        #endif
      #endif
    )
    world_a_diaeresis_lower: world_a_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_lower_macro>, <&world_a_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_diaeresis_upper_macro, /* Ä */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N4)
        #endif
      #endif
    )
    world_a_diaeresis_upper: world_a_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_upper_macro>, <&world_a_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_diaeresis: world_a_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_circumflex_lower_macro, /* â */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_SEQ_LINUX(&kp CARET &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp A)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N2)
        #endif
      #endif
    )
    world_a_circumflex_lower: world_a_circumflex_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex_lower_macro>, <&world_a_circumflex_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_circumflex_upper_macro, /* Â */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_SEQ_LINUX(&kp CARET &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N4)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N2)
        #endif
      #endif
    )
    world_a_circumflex_upper: world_a_circumflex_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex_upper_macro>, <&world_a_circumflex_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_circumflex: world_a_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_grave_lower_macro, /* à */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp A)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N4)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N0)
        #endif
      #endif
    )
    world_a_grave_lower: world_a_grave_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_grave_lower_macro>, <&world_a_grave_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_grave_upper_macro, /* À */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N0)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N0)
        #endif
      #endif
    )
    world_a_grave_upper: world_a_grave_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_grave_upper_macro>, <&world_a_grave_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_grave: world_a_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_tilde_lower_macro, /* ã */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_SEQ_LINUX(&kp TILDE &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp A)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N3)
        #endif
      #endif
    )
    world_a_tilde_lower: world_a_tilde_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde_lower_macro>, <&world_a_tilde_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_tilde_upper_macro, /* Ã */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N3)
        #endif
      #endif
    )
    world_a_tilde_upper: world_a_tilde_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde_upper_macro>, <&world_a_tilde_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_tilde: world_a_tilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_ring_lower_macro, /* å */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_SEQ_LINUX(&kp O &kp A)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_SEQ_MACOS(&kp LA(A))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N5)
        #endif
      #endif
    )
    world_a_ring_lower: world_a_ring_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring_lower_macro>, <&world_a_ring_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_a_ring_upper_macro, /* Å */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_SEQ_LINUX(&kp O &kp LS(A))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_SEQ_MACOS(&kp LA(LS(A)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N5)
        #endif
      #endif
    )
    world_a_ring_upper: world_a_ring_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring_upper_macro>, <&world_a_ring_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_a_ring: world_a_ring {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_acute_lower_macro, /* ý */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp Y)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp Y)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp D)
        #endif
      #endif
    )
    world_y_acute_lower: world_y_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute_lower_macro>, <&world_y_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_y_acute_upper_macro, /* Ý */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(Y))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(Y))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp D)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp D)
        #endif
      #endif
    )
    world_y_acute_upper: world_y_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute_upper_macro>, <&world_y_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_y_acute: world_y_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_diaeresis_lower_macro, /* ÿ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp Y)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp Y)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp F)
        #endif
      #endif
    )
    world_y_diaeresis_lower: world_y_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_diaeresis_lower_macro>, <&world_y_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_y_diaeresis_upper_macro, /* Ÿ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(Y))
        #else
        UNICODE_SEQ_LINUX(&kp N1 &kp N7 &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(Y))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N1 &kp N7 &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N1 &kp N7 &kp N8)
        #endif
      #endif
    )
    world_y_diaeresis_upper: world_y_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_diaeresis_upper_macro>, <&world_y_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_y_diaeresis: world_y_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_acute_lower_macro, /* ó */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp O)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N3)
        #endif
      #endif
    )
    world_o_acute_lower: world_o_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute_lower_macro>, <&world_o_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_acute_upper_macro, /* Ó */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N3)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N3)
        #endif
      #endif
    )
    world_o_acute_upper: world_o_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute_upper_macro>, <&world_o_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_acute: world_o_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_diaeresis_lower_macro, /* ö */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N6)
        #endif
      #endif
    )
    world_o_diaeresis_lower: world_o_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_lower_macro>, <&world_o_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_diaeresis_upper_macro, /* Ö */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N6)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N6)
        #endif
      #endif
    )
    world_o_diaeresis_upper: world_o_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_upper_macro>, <&world_o_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_diaeresis: world_o_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_circumflex_lower_macro, /* ô */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_SEQ_LINUX(&kp CARET &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp O)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N4)
        #endif
      #endif
    )
    world_o_circumflex_lower: world_o_circumflex_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex_lower_macro>, <&world_o_circumflex_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_circumflex_upper_macro, /* Ô */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_SEQ_LINUX(&kp CARET &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N4)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N4)
        #endif
      #endif
    )
    world_o_circumflex_upper: world_o_circumflex_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex_upper_macro>, <&world_o_circumflex_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_circumflex: world_o_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_grave_lower_macro, /* ò */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp O)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N2)
        #endif
      #endif
    )
    world_o_grave_lower: world_o_grave_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_grave_lower_macro>, <&world_o_grave_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_grave_upper_macro, /* Ò */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N2)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N2)
        #endif
      #endif
    )
    world_o_grave_upper: world_o_grave_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_grave_upper_macro>, <&world_o_grave_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_grave: world_o_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_tilde_lower_macro, /* õ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_SEQ_LINUX(&kp TILDE &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp O)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N5)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N5)
        #endif
      #endif
    )
    world_o_tilde_lower: world_o_tilde_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde_lower_macro>, <&world_o_tilde_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_tilde_upper_macro, /* Õ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N5)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N5)
        #endif
      #endif
    )
    world_o_tilde_upper: world_o_tilde_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde_upper_macro>, <&world_o_tilde_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_tilde: world_o_tilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_slash_lower_macro, /* ø */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_SEQ_LINUX(&kp FSLH &kp O)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_SEQ_MACOS(&kp LA(O))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N8)
        #endif
      #endif
    )
    world_o_slash_lower: world_o_slash_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash_lower_macro>, <&world_o_slash_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_o_slash_upper_macro, /* Ø */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_SEQ_LINUX(&kp FSLH &kp LS(O))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_SEQ_MACOS(&kp LA(LS(O)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N8)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N6)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N8)
        #endif
      #endif
    )
    world_o_slash_upper: world_o_slash_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash_upper_macro>, <&world_o_slash_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_o_slash: world_o_slash {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_acute_lower_macro, /* ú */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_SEQ_LINUX(&kp SQT &kp U)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp U)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp A)
        #endif
      #endif
    )
    world_u_acute_lower: world_u_acute_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute_lower_macro>, <&world_u_acute_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_u_acute_upper_macro, /* Ú */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(U))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(U))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp A)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp A)
        #endif
      #endif
    )
    world_u_acute_upper: world_u_acute_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute_upper_macro>, <&world_u_acute_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_u_acute: world_u_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_diaeresis_lower_macro, /* ü */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_SEQ_LINUX(&kp DQT &kp U)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp C)
        #endif
      #endif
    )
    world_u_diaeresis_lower: world_u_diaeresis_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_lower_macro>, <&world_u_diaeresis_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_u_diaeresis_upper_macro, /* Ü */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp C)
        #endif
      #endif
    )
    world_u_diaeresis_upper: world_u_diaeresis_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_upper_macro>, <&world_u_diaeresis_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_u_diaeresis: world_u_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_circumflex_lower_macro, /* û */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_SEQ_LINUX(&kp CARET &kp U)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp U)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp B)
        #endif
      #endif
    )
    world_u_circumflex_lower: world_u_circumflex_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex_lower_macro>, <&world_u_circumflex_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_u_circumflex_upper_macro, /* Û */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_SEQ_LINUX(&kp CARET &kp LS(U))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(U))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp B)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp B)
        #endif
      #endif
    )
    world_u_circumflex_upper: world_u_circumflex_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex_upper_macro>, <&world_u_circumflex_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_u_circumflex: world_u_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_grave_lower_macro, /* ù */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp U)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp U)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N9)
        #endif
      #endif
    )
    world_u_grave_lower: world_u_grave_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_grave_lower_macro>, <&world_u_grave_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_u_grave_upper_macro, /* Ù */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(U))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(U))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N9)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N9)
        #endif
      #endif
    )
    world_u_grave_upper: world_u_grave_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_grave_upper_macro>, <&world_u_grave_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_u_grave: world_u_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_consonants_cedilla_lower_macro, /* ç */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
        #else
        UNICODE_SEQ_LINUX(&kp E &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_SEQ_MACOS(&kp LA(C))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp E &kp N7)
        #endif
      #endif
    )
    world_consonants_cedilla_lower: world_consonants_cedilla_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_cedilla_lower_macro>, <&world_consonants_cedilla_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_consonants_cedilla_upper_macro, /* Ç */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
        #else
        UNICODE_SEQ_LINUX(&kp C &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N7)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp C &kp N7)
        #endif
      #endif
    )
    world_consonants_cedilla_upper: world_consonants_cedilla_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_cedilla_upper_macro>, <&world_consonants_cedilla_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_consonants_cedilla: world_consonants_cedilla {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_cedilla_lower>, <&world_consonants_cedilla_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_consonants_eszett_lower_macro, /* ß */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_SEQ_LINUX(&kp S &kp S)
        #else
        UNICODE_SEQ_LINUX(&kp D &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_SEQ_MACOS(&kp LA(S))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp F)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp F)
        #endif
      #endif
    )
    world_consonants_eszett_lower: world_consonants_eszett_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_eszett_lower_macro>, <&world_consonants_eszett_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_consonants_eszett_upper_macro, /* ẞ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
        COMPOSE_SEQ_LINUX(&kp LS(S) &kp LS(S))
        #else
        UNICODE_SEQ_LINUX(&kp N1 &kp E &kp N9 &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
        COMPOSE_SEQ_MACOS(&kp LA(LS(S)))
        #else
        UNICODE_SEQ_MACOS(&kp N1 &kp E &kp N9 &kp E)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N1 &kp E &kp N9 &kp E)
      #endif
    )
    world_consonants_eszett_upper: world_consonants_eszett_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_eszett_upper_macro>, <&world_consonants_eszett_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_consonants_eszett: world_consonants_eszett {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_eszett_lower>, <&world_consonants_eszett_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_consonants_ntilde_lower_macro, /* ñ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_SEQ_LINUX(&kp TILDE &kp N)
        #else
        UNICODE_SEQ_LINUX(&kp F &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp N)
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp N1)
        #endif
      #endif
    )
    world_consonants_ntilde_lower: world_consonants_ntilde_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_ntilde_lower_macro>, <&world_consonants_ntilde_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_consonants_ntilde_upper_macro, /* Ñ */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(N))
        #else
        UNICODE_SEQ_LINUX(&kp D &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(N))
        #else
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N1)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp D &kp N1)
        #endif
      #endif
    )
    world_consonants_ntilde_upper: world_consonants_ntilde_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_ntilde_upper_macro>, <&world_consonants_ntilde_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_consonants_ntilde: world_consonants_ntilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_ntilde_lower>, <&world_consonants_ntilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_angle_lower_macro, /* ‹ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp N9)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp N9)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N3 &kp N9)
      #endif
    )
    world_quotes_left_angle_lower: world_quotes_left_angle_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle_lower_macro>, <&world_quotes_left_angle_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_left_angle_upper_macro, /* « */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp B)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp B)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp B)
      #endif
    )
    world_quotes_left_angle_upper: world_quotes_left_angle_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle_upper_macro>, <&world_quotes_left_angle_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_left_angle: world_quotes_left_angle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_curly_lower_macro, /* ‘ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N8)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N8)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp N8)
      #endif
    )
    world_quotes_left_curly_lower: world_quotes_left_curly_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly_lower_macro>, <&world_quotes_left_curly_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_left_curly_upper_macro, /* “ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp C)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp C)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp C)
      #endif
    )
    world_quotes_left_curly_upper: world_quotes_left_curly_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly_upper_macro>, <&world_quotes_left_curly_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_left_curly: world_quotes_left_curly {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_low_lower_macro, /* ‚ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp A)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp A)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp A)
      #endif
    )
    world_quotes_left_low_lower: world_quotes_left_low_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_lower_macro>, <&world_quotes_left_low_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_left_low_upper_macro, /* „ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp E)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp E)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp E)
      #endif
    )
    world_quotes_left_low_upper: world_quotes_left_low_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_upper_macro>, <&world_quotes_left_low_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_left_low: world_quotes_left_low {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_corner1_lower_macro, /* 「 */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp C)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp C)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N3 &kp N0 &kp N0 &kp C)
      #endif
    )
    world_quotes_left_corner1_lower: world_quotes_left_corner1_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1_lower_macro>, <&world_quotes_left_corner1_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_left_corner1_upper_macro, /* ﹁ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N1)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N1)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp E &kp N4 &kp N1)
      #endif
    )
    world_quotes_left_corner1_upper: world_quotes_left_corner1_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1_upper_macro>, <&world_quotes_left_corner1_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_left_corner1: world_quotes_left_corner1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_corner2_lower_macro, /* 『 */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp E)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp E)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N3 &kp N0 &kp N0 &kp E)
      #endif
    )
    world_quotes_left_corner2_lower: world_quotes_left_corner2_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2_lower_macro>, <&world_quotes_left_corner2_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_left_corner2_upper_macro, /* ﹃ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N3)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N3)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp E &kp N4 &kp N3)
      #endif
    )
    world_quotes_left_corner2_upper: world_quotes_left_corner2_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2_upper_macro>, <&world_quotes_left_corner2_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_left_corner2: world_quotes_left_corner2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_grave_macro, /* ` */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N6 &kp N0)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N6 &kp N0)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N6 &kp N0)
      #endif
    )
    world_quotes_left_grave: world_quotes_left_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_grave_macro>, <&world_quotes_left_grave_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_grave
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_right_angle_lower_macro, /* › */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp A)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp A)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N3 &kp A)
      #endif
    )
    world_quotes_right_angle_lower: world_quotes_right_angle_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle_lower_macro>, <&world_quotes_right_angle_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_right_angle_upper_macro, /* » */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp B)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp B)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp B)
      #endif
    )
    world_quotes_right_angle_upper: world_quotes_right_angle_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle_upper_macro>, <&world_quotes_right_angle_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_right_angle: world_quotes_right_angle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_curly_lower_macro, /* ’ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N9)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N9)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp N9)
      #endif
    )
    world_quotes_right_curly_lower: world_quotes_right_curly_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly_lower_macro>, <&world_quotes_right_curly_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_right_curly_upper_macro, /* ” */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp D)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp D)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp N1 &kp D)
      #endif
    )
    world_quotes_right_curly_upper: world_quotes_right_curly_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly_upper_macro>, <&world_quotes_right_curly_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_right_curly: world_quotes_right_curly {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
        mods = <MOD_LSFT>;
    };
    world_quotes_right_low: world_quotes_right_low {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_corner1_lower_macro, /* 」 */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp D)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp D)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N3 &kp N0 &kp N0 &kp D)
      #endif
    )
    world_quotes_right_corner1_lower: world_quotes_right_corner1_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1_lower_macro>, <&world_quotes_right_corner1_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_right_corner1_upper_macro, /* ﹂ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N2)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N2)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp E &kp N4 &kp N2)
      #endif
    )
    world_quotes_right_corner1_upper: world_quotes_right_corner1_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1_upper_macro>, <&world_quotes_right_corner1_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_right_corner1: world_quotes_right_corner1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_corner2_lower_macro, /* 』 */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp F)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp F)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N3 &kp N0 &kp N0 &kp F)
      #endif
    )
    world_quotes_right_corner2_lower: world_quotes_right_corner2_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2_lower_macro>, <&world_quotes_right_corner2_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_quotes_right_corner2_upper_macro, /* ﹄ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N4)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N4)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp F &kp E &kp N4 &kp N4)
      #endif
    )
    world_quotes_right_corner2_upper: world_quotes_right_corner2_upper {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2_upper_macro>, <&world_quotes_right_corner2_upper_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_upper
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_quotes_right_corner2: world_quotes_right_corner2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_grave_macro, /* ´ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp N4)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N4)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp B &kp N4)
      #endif
    )
    world_quotes_right_grave: world_quotes_right_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_grave_macro>, <&world_quotes_right_grave_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_grave
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_dollar_lower_macro, /* $ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N4)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N2 &kp N4)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N4)
      #endif
    )
    world_currency_dollar_lower: world_currency_dollar_lower {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_dollar_lower_macro>, <&world_currency_dollar_lower_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_dollar_lower
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_currency_dollar: world_currency_dollar {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_currency_yen_macro, /* ¥ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N5)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N5)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N5)
      #endif
    )
    world_currency_yen: world_currency_yen {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_yen_macro>, <&world_currency_yen_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_yen
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_euro_macro, /* € */
      #if OPERATING_SYSTEM == 'L'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
        #else
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp A &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'M'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
        #else
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp A &kp C)
        #endif
      #elif OPERATING_SYSTEM == 'W'
        #ifdef WORLD_USE_COMPOSE
        #define WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
        #else
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp A &kp C)
        #endif
      #endif
    )
    world_currency_euro: world_currency_euro {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_euro_macro>, <&world_currency_euro_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_euro
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_won_macro, /* ₩ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp A &kp N9)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp A &kp N9)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp N2 &kp N0 &kp A &kp N9)
      #endif
    )
    world_currency_won: world_currency_won {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_won_macro>, <&world_currency_won_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_won
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    UNICODE(world_currency_pound_macro, /* £ */
      #if OPERATING_SYSTEM == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N3)
      #elif OPERATING_SYSTEM == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N3)
      #elif OPERATING_SYSTEM == 'W'
        UNICODE_SEQ_WINDOWS(&kp N0 &kp A &kp N3)
      #endif
    )
    world_currency_pound: world_currency_pound {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_pound_macro>, <&world_currency_pound_macro>;
        mods = <(~(
#ifdef WORLD_USE_COMPOSE_FOR_world_currency_pound
COMPOSE_MORPH_MODS
#else
UNICODE_MORPH_MODS
#endif
))>;
    };
    world_currency_generic: world_currency_generic {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_sign>, <&world_currency_crypto>;
        mods = <MOD_LSFT>;
    };

    //
    // transforms
    //
    world_i_base: world_i_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute>, <&world_i_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_i_LCTL: world_i_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_i_RCTL: world_i_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex>, <&world_i_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_e_base: world_e_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute>, <&world_e_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RALT: world_e_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae>, <&world_e_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_LCTL: world_e_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RCTL: world_e_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex>, <&world_e_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_a_base: world_a_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute>, <&world_a_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LALT: world_a_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde>, <&world_a_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RALT: world_a_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring>, <&world_a_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LCTL: world_a_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RCTL: world_a_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex>, <&world_a_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_y_base: world_y_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute>, <&world_y_diaeresis>;
        mods = <(MOD_LCTL)>;
    };
    world_o_base: world_o_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute>, <&world_o_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LALT: world_o_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde>, <&world_o_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RALT: world_o_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash>, <&world_o_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LCTL: world_o_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RCTL: world_o_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex>, <&world_o_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_u_base: world_u_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute>, <&world_u_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_u_LCTL: world_u_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_u_RCTL: world_u_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex>, <&world_u_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_consonants_base: world_consonants_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_cedilla>, <&world_consonants_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    world_consonants_LCTL: world_consonants_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_consonants_ntilde>, <&world_consonants_eszett>;
        mods = <(MOD_RCTL)>;
    };
    world_quotes_left_base: world_quotes_left_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_LALT: world_quotes_left_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_RALT: world_quotes_left_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_LCTL: world_quotes_left_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_RCTL: world_quotes_left_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_quotes_right_base: world_quotes_right_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_LALT: world_quotes_right_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_RALT: world_quotes_right_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_LCTL: world_quotes_right_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_RCTL: world_quotes_right_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_currency_base: world_currency_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_dollar>, <&world_currency_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_LALT: world_currency_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_yen>, <&world_currency_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_RALT: world_currency_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_won>, <&world_currency_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_LCTL: world_currency_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_euro>, <&world_currency_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_RCTL: world_currency_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_pound>, <&world_currency_generic>;
        mods = <(MOD_RSFT)>;
    };


};

};

/* Automatically generated macro definitions */
/ {
    macros {
    
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_QWERTY {
            bindings = <
               &kp F1    &kp F2    &kp F3     &kp F4     &kp F5                                                                           &kp F6     &kp F7    &kp F8    &kp F9   &kp F10
            &kp PG_UP    &kp N1    &kp N2     &kp N3     &kp N4  &kp N5                                                        &kp N6     &kp N7     &kp N8    &kp N9    &kp N0   &kp F11
            &kp PG_DN     &kp Q     &kp W      &kp E      &kp R   &kp T                                                         &kp Y      &kp U      &kp I     &kp O     &kp P   &kp F12
              &kp ESC     &kp A     &kp S      &kp D      &kp F   &kp G                                                         &kp H      &kp J      &kp K     &kp L  &kp SEMI  &kp HOME
           &caps_word     &kp Z     &kp X      &kp C      &kp V   &kp B   &kp TAB   &sl 3   &sl 4   &sl 2    &sl 1    &kp DEL   &kp N      &kp M  &kp COMMA   &kp DOT  &kp FSLH   &kp END
 &magic LAYER_Magic 0  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT          &kp BSPC   &mo 5   &mo 6   &mo 7  &kp RET  &kp SPACE          &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI    &lower
            >;
        };

        layer_Acute {
            bindings = <
 &trans          &trans  &trans                     &trans                  &trans                                                                                          &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans                     &trans                  &trans  &trans                                                          &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans             &world_e_acute                  &trans  &trans                                                  &world_y_acute          &world_u_acute  &world_i_acute  &world_o_acute  &trans  &trans
 &trans  &world_a_acute  &trans                     &trans                  &trans  &trans                                                          &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &world_consonants_cedilla                  &trans  &trans  &trans  &trans  &trans  &trans   &to 0  &trans          &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans                     &trans  &lm LAYER_Acute LSHIFT          &trans  &trans  &trans  &trans  &trans  &trans                  &lm LAYER_Acute LSHIFT          &trans          &trans  &trans  &trans
            >;
        };

        layer_Tilde {
            bindings = <
 &trans          &trans  &trans  &trans                  &trans                                                                                                    &trans  &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &trans                  &trans  &trans                                                                    &trans                  &trans  &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &trans                  &trans  &trans                                                                    &trans                  &trans  &trans  &world_o_tilde  &trans  &trans
 &trans  &world_a_tilde  &trans  &trans                  &trans  &trans                                                                    &trans                  &trans  &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans   &to 0  &trans  &trans  &world_consonants_ntilde                  &trans  &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &trans  &lm LAYER_Tilde LSHIFT          &trans  &trans  &trans  &trans  &trans  &trans                            &lm LAYER_Tilde LSHIFT  &trans          &trans  &trans  &trans
            >;
        };

        layer_Circumflex {
            bindings = <
 &trans               &trans  &trans               &trans                       &trans                                                                                       &trans               &trans               &trans  &trans  &trans
 &trans               &trans  &trans               &trans                       &trans  &trans                                                  &trans                       &trans               &trans               &trans  &trans  &trans
 &trans               &trans  &trans  &world_e_circumflex                       &trans  &trans                                                  &trans          &world_u_circumflex  &world_i_circumflex  &world_o_circumflex  &trans  &trans
 &trans  &world_a_circumflex  &trans               &trans                       &trans  &trans                                                  &trans                       &trans               &trans               &trans  &trans  &trans
 &trans               &trans  &trans               &trans                       &trans  &trans  &trans   &to 0  &trans  &trans  &trans  &trans  &trans                       &trans               &trans               &trans  &trans  &trans
 &trans               &trans  &trans               &trans  &lm LAYER_Circumflex LSHIFT          &trans  &trans  &trans  &trans  &trans  &trans          &lm LAYER_Circumflex LSHIFT               &trans               &trans  &trans  &trans
            >;
        };

        layer_Grave {
            bindings = <
 &trans          &trans  &trans          &trans                  &trans                                                                                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans          &trans                  &trans  &trans                                                  &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans  &world_e_grave                  &trans  &trans                                                  &trans          &world_u_grave  &world_i_grave  &world_o_grave  &trans  &trans
 &trans  &world_a_grave  &trans          &trans                  &trans  &trans                                                  &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans          &trans                  &trans  &trans  &trans  &trans   &to 0  &trans  &trans  &trans  &trans                  &trans          &trans          &trans  &trans  &trans
 &trans          &trans  &trans          &trans  &lm LAYER_Grave LSHIFT          &trans  &trans  &trans  &trans  &trans  &trans          &lm LAYER_Grave LSHIFT          &trans          &trans  &trans  &trans
            >;
        };

        layer_Cursor {
            bindings = <
   &none      &none      &none      &none      &none                                                                           &none      &none      &none      &none        &none
 &kp ESC    &kp RET  &kp SPACE    &kp TAB    &kp DEL    &kp INS                                                    &kp INS   &kp DEL    &kp TAB  &kp SPACE  &sk LSHFT      &kp ESC
   &none  &sk LSHFT  &kp LC(Y)  &kp LC(Z)   &kp BSPC  &kp LC(X)                                                  &kp PG_UP  &kp HOME     &kp UP    &kp END  &kp PG_UP        &none
   &none      &none      &none      &none  &kp LC(A)  &kp LC(C)                                                  &kp PG_DN  &kp LEFT   &kp DOWN  &kp RIGHT  &kp PG_DN        &none
   &none      &none      &none      &none      &none  &kp LC(V)  &trans  &trans  &trans  &trans  &trans  &trans    &kp RET  &kp BSPC  &kp LC(Z)  &kp LC(Y)  &kp K_APP  &kp LG(DOT)
   &none     &trans     &trans     &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans               &trans     &trans     &trans     &trans        &none
            >;
        };

        layer_Number {
            bindings = <
      &none    &none      &none      &none      &none                                                                                &none     &none   &none      &none      &none
    &kp ESC  &kp RET  &kp SPACE    &kp TAB    &kp DEL  &kp INS                                                         &kp CARET  &kp DLLR  &kp HASH  &kp AT   &kp EXCL   &kp PIPE
      &none    &none  &kp LC(Y)  &kp LC(Z)   &kp BSPC    &kp A                                                         &kp PRCNT    &kp N7    &kp N8  &kp N9  &kp COLON      &kp K
 &kp KP_NUM    &none      &none      &none      &none    &kp B                                                          &kp PLUS    &kp N4    &kp N5  &kp N6  &kp MINUS      &kp J
      &none    &none      &none      &none  &kp UNDER    &kp C  &trans  &trans  &trans     &kp LT   &kp GT  &kp EQUAL   &kp STAR    &kp N1    &kp N2  &kp N3   &kp FSLH  &kp LS(G)
      &none   &trans     &trans     &trans     &trans           &trans  &trans  &trans  &kp COMMA  &kp DOT     &kp N0               &trans    &trans  &trans     &trans  &kp TILDE
            >;
        };

        layer_Symbol {
            bindings = <
  &none      &none      &none     &none     &none                                                                                   &none        &none      &none    &none   &none
  &none      &none  &kp GRAVE    &kp LT    &kp GT     &kp AT                                                             &none      &none        &none      &none    &none   &none
  &none   &kp PLUS    &kp SQT  &kp LPAR  &kp RPAR    &kp DQT                                                          &kp SEMI  &kp MINUS    &kp UNDER  &kp EQUAL    &none   &none
  &none  &kp EQUAL  &kp TILDE  &kp LBRC  &kp RBRC  &kp COLON                                                           &kp DOT    &kp DEL  &kp LS(TAB)      &none    &none   &none
  &none  &kp MINUS  &kp CARET  &kp LBKT  &kp RBKT   &kp SEMI     &none      &none      &none   &none   &none   &none  &kp PIPE   &kp BSPC      &kp TAB  &kp SPACE  &kp RET   &none
  &none  &kp UNDER   &kp HASH  &kp FSLH  &kp BSLH             &kp EXCL  &kp QMARK  &kp SPACE   &none   &none   &none               &trans       &trans     &trans   &trans   &none
            >;
        };

        layer_System {
            bindings = <
           &none            &none            &none            &none            &none                                                                                                      &none            &none            &none            &none               &none
           &none            &none            &none            &none            &none      &none                                                                          &none            &none            &none            &none            &none               &none
           &none            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none      &none                                                                &rgb_ug RGB_SAI            &none            &none            &none            &none     &rgb_ug RGB_SAD
 &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &kp K_APP                                                                &rgb_ug RGB_HUI        &kp K_APP            &none            &none            &none     &rgb_ug RGB_HUD
           &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI      &none      &none     &none            &none   &none   &none   &none  &rgb_ug RGB_SPI  &rgb_ug RGB_TOG        &kp PSCRN         &kp SLCK  &kp PAUSE_BREAK     &rgb_ug RGB_SPD
           &none            &none            &none            &none            &none             &kp PSCRN  &kp SLCK  &kp PAUSE_BREAK   &none   &none   &none                   &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &linux_magic_sysrq
            >;
        };

        layer_Factory {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
              &kp TAB     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
              &kp ESC     &kp A    &kp S     &kp D      &kp F   &kp G                                                                   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
            &kp GRAVE     &kp Z    &kp X     &kp C      &kp V   &kp B  &kp LSHFT  &kp LCTRL    &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC    &kp DEL  &kp LALT  &kp RALT    &kp RET  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                          &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none       &kp PAUSE_BREAK
            &kp EQUAL         &none           &none           &none            &none   &kp HOME                                                     &kp LPAR  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY       &kp PRINTSCREEN
              &kp TAB         &none           &none    &kp UP_ARROW            &none    &kp END                                                     &kp RPAR   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS        &kp SCROLLLOCK
              &kp ESC         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                  &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &kp KP_NUM
            &kp GRAVE     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans    &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER              &kp LALT
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER  &magic LAYER_Magic 0
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3        &tog 9   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
